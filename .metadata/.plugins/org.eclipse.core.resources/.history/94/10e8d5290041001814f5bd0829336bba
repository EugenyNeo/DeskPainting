
package MyVecorDraw;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;

import javax.swing.JPanel;



public class PDraw extends JPanel implements MouseListener, MouseMotionListener

{
	int x;
	int y;
//	int x2, y2; 
	ArrayList<IShape> pp = new ArrayList<IShape>();
	Graphics2D gg = null;
	//BufferedImage bi = new BufferedImage(1010, 620, BufferedImage.SCALE_DEFAULT);

	public PDraw(PCommand cmd)
	{
		
		setBounds(220,10,1010, 620);
		setBackground(Color.white);
		addMouseListener(this);
		addMouseMotionListener(this);
		//Graphics2D gg = (Graphics2D) bi.getGraphics();
		gg = (Graphics2D) getGraphics();
		//gg.setColor(Color.white);
		
		//gg.fillRect(220, 10, 1010, 620);
		//repaint();
	}

	@Override
	public void mousePressed(MouseEvent e) 
	{
		x = e.getX();
		y = e.getY();
	}

	@Override
	public void mouseDragged(MouseEvent e)
	{
			PData data = PData.getInstace();
			int x2 = e.getX();
			int y2 = e.getY();	
			IShape shp = new PCurve();
			//Graphics2D gg = (Graphics2D) getGraphics();
			System.out.println("Я рисую кривую1");
			shp.init(x, y, x2, y2, data.getColor(), data.getWidth());
			if(data.getType() == "Curve")
			{
				System.out.println("Я рисую кривую2");
				
				shp.draw(gg);
				x = x2;
				y = y2;
				pp.add(shp);
			}
			repaint();
	}
	@Override
	public void paint(Graphics g)
	{
		super.paint(g);
		//Graphics2D gg = (Graphics2D) getGraphics();
		for(IShape  shape : pp)
		{
			shape.draw(gg);
		}
	}

	/*private void Draw(int x2,int y2)
	{
		IShape p;
		
		if(PData.type == "Line")
		{
			p = new PLine(x, y, x2, y2, PData.width, PData.color);
		}
		else if(PData.type == "Rectangle")
		{
			p = new PRect(x, y, x2, y2, PData.width, PData.color);
		}
		else if(PData.type == "RoundRect")
		{
			p = new PRoundRect(x, y, x2, y2, PData.width, PData.color);
		}
		else if (PData.type == "Ellipse")
		{
			p = new PEllipse(x, y, x2, y2, PData.width, PData.color);
		}
		else 
		{
			p = new PLine(x, y, x2, y2, PData.width, PData.color);
		}
		
		p.draw((Graphics2D) bi.getGraphics());
		pp.add(p);
	}*/

	@Override
	public void mouseClicked(MouseEvent arg0) {}
	@Override
	public void mouseEntered(MouseEvent arg0) {}
	@Override
	public void mouseExited(MouseEvent arg0) {}
	@Override
	public void mouseReleased(MouseEvent e)
	{
		PData data = PData.getInstace();
		IShape shp = null;
		switch(data.getType())
		{
		case "line" : shp = new PLine(); break;
		case "rectangle" : shp = new PRect(); break;
		case "roundRect" : shp = new PRoundRect(); break;
		case "ellipse" : shp = new PEllipse(); break;
		}
		if (shp != null)
		{
			int x1 = e.getX();
			int y1 = e.getY();
			shp.init(x, y, x1, y1, data.getColor(), data.getWidth());
			shp.draw(gg);
			System.out.println("draw " + data.getType());
			pp.add(shp);
			x = x1;
			y = y1;
		}
		repaint();
	}
	@Override
	public void mouseMoved(MouseEvent arg0) {}

}
